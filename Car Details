{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPn5ABs/2Dt7kFVuHueSTYq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["NAME - MONIKA BHATT\n","\n","ROLL NO- BCA-DS24/036\n","\n","SEMESTER-3rd"],"metadata":{"id":"PgcxamGW7wta"}},{"cell_type":"code","execution_count":21,"metadata":{"id":"j7zBRn-RS2XX","executionInfo":{"status":"ok","timestamp":1752726494366,"user_tz":-330,"elapsed":30,"user":{"displayName":"Monika","userId":"06736732378684357376"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["df = pd.read_csv(\"CAR DETAILS FROM CAR DEKHO (1).csv\")"],"metadata":{"id":"0fzP7bgTUwfr","executionInfo":{"status":"ok","timestamp":1752726496067,"user_tz":-330,"elapsed":33,"user":{"displayName":"Monika","userId":"06736732378684357376"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"ao3JVCsSU7Bq","executionInfo":{"status":"ok","timestamp":1752726497529,"user_tz":-330,"elapsed":70,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"780c02cb-10cb-40a2-81c6-ede15c23a2ab"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                     name  year  selling_price  km_driven  \\\n","0                           Maruti 800 AC  2007          60000      70000   \n","1                Maruti Wagon R LXI Minor  2007         135000      50000   \n","2                    Hyundai Verna 1.6 SX  2012         600000     100000   \n","3                  Datsun RediGO T Option  2017         250000      46000   \n","4                   Honda Amaze VX i-DTEC  2014         450000     141000   \n","...                                   ...   ...            ...        ...   \n","4335  Hyundai i20 Magna 1.4 CRDi (Diesel)  2014         409999      80000   \n","4336           Hyundai i20 Magna 1.4 CRDi  2014         409999      80000   \n","4337                  Maruti 800 AC BSIII  2009         110000      83000   \n","4338     Hyundai Creta 1.6 CRDi SX Option  2016         865000      90000   \n","4339                     Renault KWID RXT  2016         225000      40000   \n","\n","        fuel seller_type transmission         owner  \n","0     Petrol  Individual       Manual   First Owner  \n","1     Petrol  Individual       Manual   First Owner  \n","2     Diesel  Individual       Manual   First Owner  \n","3     Petrol  Individual       Manual   First Owner  \n","4     Diesel  Individual       Manual  Second Owner  \n","...      ...         ...          ...           ...  \n","4335  Diesel  Individual       Manual  Second Owner  \n","4336  Diesel  Individual       Manual  Second Owner  \n","4337  Petrol  Individual       Manual  Second Owner  \n","4338  Diesel  Individual       Manual   First Owner  \n","4339  Petrol  Individual       Manual   First Owner  \n","\n","[4340 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-f49fd9c2-cee4-403d-bdb9-9c520d1ebb23\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>year</th>\n","      <th>selling_price</th>\n","      <th>km_driven</th>\n","      <th>fuel</th>\n","      <th>seller_type</th>\n","      <th>transmission</th>\n","      <th>owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Maruti 800 AC</td>\n","      <td>2007</td>\n","      <td>60000</td>\n","      <td>70000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Maruti Wagon R LXI Minor</td>\n","      <td>2007</td>\n","      <td>135000</td>\n","      <td>50000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Hyundai Verna 1.6 SX</td>\n","      <td>2012</td>\n","      <td>600000</td>\n","      <td>100000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Datsun RediGO T Option</td>\n","      <td>2017</td>\n","      <td>250000</td>\n","      <td>46000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Honda Amaze VX i-DTEC</td>\n","      <td>2014</td>\n","      <td>450000</td>\n","      <td>141000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4335</th>\n","      <td>Hyundai i20 Magna 1.4 CRDi (Diesel)</td>\n","      <td>2014</td>\n","      <td>409999</td>\n","      <td>80000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4336</th>\n","      <td>Hyundai i20 Magna 1.4 CRDi</td>\n","      <td>2014</td>\n","      <td>409999</td>\n","      <td>80000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4337</th>\n","      <td>Maruti 800 AC BSIII</td>\n","      <td>2009</td>\n","      <td>110000</td>\n","      <td>83000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4338</th>\n","      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n","      <td>2016</td>\n","      <td>865000</td>\n","      <td>90000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4339</th>\n","      <td>Renault KWID RXT</td>\n","      <td>2016</td>\n","      <td>225000</td>\n","      <td>40000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4340 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f49fd9c2-cee4-403d-bdb9-9c520d1ebb23')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f49fd9c2-cee4-403d-bdb9-9c520d1ebb23 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f49fd9c2-cee4-403d-bdb9-9c520d1ebb23');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-5fbf1c98-4050-4795-8d79-98411497d115\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5fbf1c98-4050-4795-8d79-98411497d115')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-5fbf1c98-4050-4795-8d79-98411497d115 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_0a48e10b-7d33-43f5-8321-a34e0e58a517\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0a48e10b-7d33-43f5-8321-a34e0e58a517 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4340,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1491,\n        \"samples\": [\n          \"Mahindra Thar DI 4X2\",\n          \"Maruti Swift VXI BSIII\",\n          \"Volkswagen Polo Petrol Comfortline 1.2L\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1992,\n        \"max\": 2020,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2013,\n          1996,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 578548,\n        \"min\": 20000,\n        \"max\": 8900000,\n        \"num_unique_values\": 445,\n        \"samples\": [\n          346000,\n          198000,\n          385000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"km_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46644,\n        \"min\": 1,\n        \"max\": 806599,\n        \"num_unique_values\": 770,\n        \"samples\": [\n          60516,\n          63240,\n          54350\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fuel\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Diesel\",\n          \"Electric\",\n          \"CNG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Individual\",\n          \"Dealer\",\n          \"Trustmark Dealer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Second Owner\",\n          \"Test Drive Car\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["#1.What is the shape of the dataset?\n","df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T5zyV8UnU92V","executionInfo":{"status":"ok","timestamp":1752570319502,"user_tz":-330,"elapsed":17,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"57846f53-9cba-4aa9-c7c4-40602364c002"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4340, 8)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#2.Display the first 10 rows of the dataset.\n","df.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"KD1fHDuPVNEZ","executionInfo":{"status":"ok","timestamp":1752570346361,"user_tz":-330,"elapsed":129,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"eb544de8-ae04-4aa7-e548-cf6bb0748a2e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        name  year  selling_price  km_driven    fuel  \\\n","0              Maruti 800 AC  2007          60000      70000  Petrol   \n","1   Maruti Wagon R LXI Minor  2007         135000      50000  Petrol   \n","2       Hyundai Verna 1.6 SX  2012         600000     100000  Diesel   \n","3     Datsun RediGO T Option  2017         250000      46000  Petrol   \n","4      Honda Amaze VX i-DTEC  2014         450000     141000  Diesel   \n","5       Maruti Alto LX BSIII  2007         140000     125000  Petrol   \n","6  Hyundai Xcent 1.2 Kappa S  2016         550000      25000  Petrol   \n","7   Tata Indigo Grand Petrol  2014         240000      60000  Petrol   \n","8   Hyundai Creta 1.6 VTVT S  2015         850000      25000  Petrol   \n","9   Maruti Celerio Green VXI  2017         365000      78000     CNG   \n","\n","  seller_type transmission         owner  \n","0  Individual       Manual   First Owner  \n","1  Individual       Manual   First Owner  \n","2  Individual       Manual   First Owner  \n","3  Individual       Manual   First Owner  \n","4  Individual       Manual  Second Owner  \n","5  Individual       Manual   First Owner  \n","6  Individual       Manual   First Owner  \n","7  Individual       Manual  Second Owner  \n","8  Individual       Manual   First Owner  \n","9  Individual       Manual   First Owner  "],"text/html":["\n","  <div id=\"df-d02196d8-6268-43c6-a5e0-367b4e9fde0d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>year</th>\n","      <th>selling_price</th>\n","      <th>km_driven</th>\n","      <th>fuel</th>\n","      <th>seller_type</th>\n","      <th>transmission</th>\n","      <th>owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Maruti 800 AC</td>\n","      <td>2007</td>\n","      <td>60000</td>\n","      <td>70000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Maruti Wagon R LXI Minor</td>\n","      <td>2007</td>\n","      <td>135000</td>\n","      <td>50000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Hyundai Verna 1.6 SX</td>\n","      <td>2012</td>\n","      <td>600000</td>\n","      <td>100000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Datsun RediGO T Option</td>\n","      <td>2017</td>\n","      <td>250000</td>\n","      <td>46000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Honda Amaze VX i-DTEC</td>\n","      <td>2014</td>\n","      <td>450000</td>\n","      <td>141000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Maruti Alto LX BSIII</td>\n","      <td>2007</td>\n","      <td>140000</td>\n","      <td>125000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Hyundai Xcent 1.2 Kappa S</td>\n","      <td>2016</td>\n","      <td>550000</td>\n","      <td>25000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Tata Indigo Grand Petrol</td>\n","      <td>2014</td>\n","      <td>240000</td>\n","      <td>60000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Second Owner</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Hyundai Creta 1.6 VTVT S</td>\n","      <td>2015</td>\n","      <td>850000</td>\n","      <td>25000</td>\n","      <td>Petrol</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Maruti Celerio Green VXI</td>\n","      <td>2017</td>\n","      <td>365000</td>\n","      <td>78000</td>\n","      <td>CNG</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d02196d8-6268-43c6-a5e0-367b4e9fde0d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d02196d8-6268-43c6-a5e0-367b4e9fde0d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d02196d8-6268-43c6-a5e0-367b4e9fde0d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6912b200-c590-4af7-89e0-0dca3e73bcc5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6912b200-c590-4af7-89e0-0dca3e73bcc5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6912b200-c590-4af7-89e0-0dca3e73bcc5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4340,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1491,\n        \"samples\": [\n          \"Mahindra Thar DI 4X2\",\n          \"Maruti Swift VXI BSIII\",\n          \"Volkswagen Polo Petrol Comfortline 1.2L\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1992,\n        \"max\": 2020,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2013,\n          1996,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 578548,\n        \"min\": 20000,\n        \"max\": 8900000,\n        \"num_unique_values\": 445,\n        \"samples\": [\n          346000,\n          198000,\n          385000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"km_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46644,\n        \"min\": 1,\n        \"max\": 806599,\n        \"num_unique_values\": 770,\n        \"samples\": [\n          60516,\n          63240,\n          54350\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fuel\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Diesel\",\n          \"Electric\",\n          \"CNG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Individual\",\n          \"Dealer\",\n          \"Trustmark Dealer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Second Owner\",\n          \"Test Drive Car\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#3.What are the column names?\n","df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZyLKb2INVTl1","executionInfo":{"status":"ok","timestamp":1752570367343,"user_tz":-330,"elapsed":21,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"661526dc-bef6-4825-ff0a-1dbcf57fab71"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['name', 'year', 'selling_price', 'km_driven', 'fuel', 'seller_type',\n","       'transmission', 'owner'],\n","      dtype='object')"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#4.What are the data types of each column?\n","df.dtypes"],"metadata":{"id":"0ESOWBGJVYwC","colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"status":"ok","timestamp":1752570457766,"user_tz":-330,"elapsed":87,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"54ed6d97-d9ac-453a-958a-42f05c1816f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name             object\n","year              int64\n","selling_price     int64\n","km_driven         int64\n","fuel             object\n","seller_type      object\n","transmission     object\n","owner            object\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>name</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>selling_price</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>km_driven</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>fuel</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>seller_type</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>owner</th>\n","      <td>object</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#5.How many missing values are there in each column?\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"luB9eyB6Vunb","executionInfo":{"status":"ok","timestamp":1752570479516,"user_tz":-330,"elapsed":128,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"8940d576-eeeb-4f5e-8ed5-c95dfe4db3e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name             0\n","year             0\n","selling_price    0\n","km_driven        0\n","fuel             0\n","seller_type      0\n","transmission     0\n","owner            0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>selling_price</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>km_driven</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fuel</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>seller_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>owner</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#6.What are the unique seller types?\n","df[\"seller_type\"].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3oV3hepJVz76","executionInfo":{"status":"ok","timestamp":1752570643283,"user_tz":-330,"elapsed":42,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"6f0c3463-5aeb-4b4e-d8bc-0d53a01326ef"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Individual', 'Dealer', 'Trustmark Dealer'], dtype=object)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#7.How many car models are there?\n","df[\"name\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"-HDk7eZOV7PW","executionInfo":{"status":"ok","timestamp":1752570833192,"user_tz":-330,"elapsed":200,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"8d83c032-2433-48ce-e054-af583e94a909"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name\n","Maruti Swift Dzire VDI                            69\n","Maruti Alto 800 LXI                               59\n","Maruti Alto LXi                                   47\n","Hyundai EON Era Plus                              35\n","Maruti Alto LX                                    35\n","                                                  ..\n","Honda Brio 1.2 S Option MT                         1\n","Mahindra Bolero Power Plus Plus Non AC BSIV PS     1\n","Tata Indigo LS BSII                                1\n","Force One EX                                       1\n","Chevrolet Aveo 1.4 LT BSIV                         1\n","Name: count, Length: 1491, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Maruti Swift Dzire VDI</th>\n","      <td>69</td>\n","    </tr>\n","    <tr>\n","      <th>Maruti Alto 800 LXI</th>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>Maruti Alto LXi</th>\n","      <td>47</td>\n","    </tr>\n","    <tr>\n","      <th>Hyundai EON Era Plus</th>\n","      <td>35</td>\n","    </tr>\n","    <tr>\n","      <th>Maruti Alto LX</th>\n","      <td>35</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Honda Brio 1.2 S Option MT</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Mahindra Bolero Power Plus Plus Non AC BSIV PS</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Tata Indigo LS BSII</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Force One EX</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chevrolet Aveo 1.4 LT BSIV</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1491 rows Ã— 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#8.What is average selling price?\n","df[\"selling_price\"].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0La9-6JXKXV","executionInfo":{"status":"ok","timestamp":1752571018978,"user_tz":-330,"elapsed":94,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"fc98d191-0913-4ebb-d2de-e7c9bd2f77bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(504127.3117511521)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#9.What is the maximum selling price?\n","df[\"selling_price\"].max()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8cs8SJpDX3wN","executionInfo":{"status":"ok","timestamp":1752571107503,"user_tz":-330,"elapsed":172,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"1aad761d-0095-414a-d916-d59bcdbb8777"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8900000"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["#10.What is the minimum selling price?"],"metadata":{"id":"PdiaedcYjj4B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df[\"selling_price\"].min()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PpGI5kboYE-c","executionInfo":{"status":"ok","timestamp":1752571110838,"user_tz":-330,"elapsed":49,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"d2951789-446d-4ad6-ec5d-5a065889c751"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20000"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["#11.Retrieve records of car models whose selling price is below 2000000.\n","df[df[\"selling_price\"]<2000000][[\"name\",\"selling_price\"]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"i2dnu-t9YOPx","executionInfo":{"status":"ok","timestamp":1752571420489,"user_tz":-330,"elapsed":159,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"947d5f4b-2be5-41fc-d0ef-af728492ec4f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                     name  selling_price\n","0                           Maruti 800 AC          60000\n","1                Maruti Wagon R LXI Minor         135000\n","2                    Hyundai Verna 1.6 SX         600000\n","3                  Datsun RediGO T Option         250000\n","4                   Honda Amaze VX i-DTEC         450000\n","...                                   ...            ...\n","4335  Hyundai i20 Magna 1.4 CRDi (Diesel)         409999\n","4336           Hyundai i20 Magna 1.4 CRDi         409999\n","4337                  Maruti 800 AC BSIII         110000\n","4338     Hyundai Creta 1.6 CRDi SX Option         865000\n","4339                     Renault KWID RXT         225000\n","\n","[4239 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-7a43eb25-8c24-4004-a25c-60b6b260cd51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>selling_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Maruti 800 AC</td>\n","      <td>60000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Maruti Wagon R LXI Minor</td>\n","      <td>135000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Hyundai Verna 1.6 SX</td>\n","      <td>600000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Datsun RediGO T Option</td>\n","      <td>250000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Honda Amaze VX i-DTEC</td>\n","      <td>450000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4335</th>\n","      <td>Hyundai i20 Magna 1.4 CRDi (Diesel)</td>\n","      <td>409999</td>\n","    </tr>\n","    <tr>\n","      <th>4336</th>\n","      <td>Hyundai i20 Magna 1.4 CRDi</td>\n","      <td>409999</td>\n","    </tr>\n","    <tr>\n","      <th>4337</th>\n","      <td>Maruti 800 AC BSIII</td>\n","      <td>110000</td>\n","    </tr>\n","    <tr>\n","      <th>4338</th>\n","      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n","      <td>865000</td>\n","    </tr>\n","    <tr>\n","      <th>4339</th>\n","      <td>Renault KWID RXT</td>\n","      <td>225000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4239 rows Ã— 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a43eb25-8c24-4004-a25c-60b6b260cd51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7a43eb25-8c24-4004-a25c-60b6b260cd51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7a43eb25-8c24-4004-a25c-60b6b260cd51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-fc8cdc0c-c9b6-400a-8198-a2a773d5d5d3\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc8cdc0c-c9b6-400a-8198-a2a773d5d5d3')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-fc8cdc0c-c9b6-400a-8198-a2a773d5d5d3 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[df[\\\"selling_price\\\"]<2000000][[\\\"name\\\",\\\"selling_price\\\"]]\",\n  \"rows\": 4239,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1453,\n        \"samples\": [\n          \"Force One EX\",\n          \"Toyota Innova 2.5 GX 7 STR\",\n          \"Honda BR-V i-DTEC VX MT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 323947,\n        \"min\": 20000,\n        \"max\": 1975000,\n        \"num_unique_values\": 408,\n        \"samples\": [\n          315000,\n          1900000,\n          990000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["#12.Retrieve records of car models whose selling price is greater than 3000000.\n","df[df[\"selling_price\"]>3000000][[\"name\",\"selling_price\"]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zv4AE83AZMis","executionInfo":{"status":"ok","timestamp":1752571678002,"user_tz":-330,"elapsed":481,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"3e373c9d-0a52-468b-c53b-876533dadb61"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                   name  selling_price\n","89    Mercedes-Benz S-Class S 350d Connoisseurs Edition        8150000\n","101          Mercedes-Benz E-Class Exclusive E 200 BSIV        4500000\n","539      Mercedes-Benz GL-Class 350 CDI Blue Efficiency        4400000\n","553            Mercedes-Benz C-Class Progressive C 220d        3800000\n","555                             BMW X5 xDrive 30d xLine        4950000\n","572            Mercedes-Benz C-Class Progressive C 220d        3800000\n","574                             BMW X5 xDrive 30d xLine        4950000\n","591            Mercedes-Benz C-Class Progressive C 220d        3800000\n","593                             BMW X5 xDrive 30d xLine        4950000\n","610            Mercedes-Benz C-Class Progressive C 220d        3800000\n","612                             BMW X5 xDrive 30d xLine        4950000\n","731               Land Rover Discovery Sport TD4 HSE 7S        4000000\n","898            Mercedes-Benz C-Class Progressive C 220d        3800000\n","900                             BMW X5 xDrive 30d xLine        4950000\n","917            Mercedes-Benz C-Class Progressive C 220d        3800000\n","919                             BMW X5 xDrive 30d xLine        4950000\n","963                                   Audi A5 Sportback        4700000\n","968                        BMW 7 Series Signature 730Ld        4000000\n","988                      Land Rover Discovery S 2.0 SD4        4000000\n","1021           Mercedes-Benz C-Class Progressive C 220d        3800000\n","1023                            BMW X5 xDrive 30d xLine        4950000\n","1026                        BMW 3 Series GT Luxury Line        3050000\n","1065                         Audi A4 30 TFSI Technology        3100000\n","1088          Land Rover Discovery Sport SD4 HSE Luxury        3500000\n","1290                    Toyota Fortuner 2.8 2WD AT BSIV        3200000\n","1479                        Audi A4 35 TDI Premium Plus        3256000\n","1705                                    Audi Q5 2.0 TDI        3500000\n","1834           Mercedes-Benz C-Class Progressive C 220d        3800000\n","1836                            BMW X5 xDrive 30d xLine        4950000\n","2178     Mercedes-Benz GL-Class 350 CDI Blue Efficiency        4400000\n","2237           Mercedes-Benz C-Class Progressive C 220d        3800000\n","2239                            BMW X5 xDrive 30d xLine        4950000\n","2256           Mercedes-Benz C-Class Progressive C 220d        3800000\n","2258                            BMW X5 xDrive 30d xLine        4950000\n","2295                 Audi Q5 3.0 TDI Quattro Technology        3899000\n","2323                         Audi A4 30 TFSI Technology        3100000\n","2503                 Ford Endeavour 3.2 Titanium AT 4X4        3200000\n","2580         Mercedes-Benz E-Class Exclusive E 200 BSIV        4500000\n","2737           Mercedes-Benz C-Class Progressive C 220d        3800000\n","2739                            BMW X5 xDrive 30d xLine        4950000\n","3453                      BMW 5 Series 520d Luxury Line        4800000\n","3863                    Toyota Fortuner 2.8 4WD AT BSIV        3100000\n","3872           Audi RS7 2015-2019 Sportback Performance        8900000\n","3873                 Audi Q5 3.0 TDI Quattro Technology        3200000\n","3875     Land Rover Range Rover 4.4 Diesel LWB Vogue SE        4200000\n","3883                      BMW 5 Series 520d Luxury Line        4800000\n","3969            Mercedes-Benz GLS 2016-2020 350d 4MATIC        5500000\n","4047                    Volvo XC 90 D5 Inscription BSIV        4500000\n","4304                 Audi Q5 3.0 TDI Quattro Technology        3899000"],"text/html":["\n","  <div id=\"df-df39c25e-f3f3-4c02-9579-afc88b1d84a7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>selling_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>89</th>\n","      <td>Mercedes-Benz S-Class S 350d Connoisseurs Edition</td>\n","      <td>8150000</td>\n","    </tr>\n","    <tr>\n","      <th>101</th>\n","      <td>Mercedes-Benz E-Class Exclusive E 200 BSIV</td>\n","      <td>4500000</td>\n","    </tr>\n","    <tr>\n","      <th>539</th>\n","      <td>Mercedes-Benz GL-Class 350 CDI Blue Efficiency</td>\n","      <td>4400000</td>\n","    </tr>\n","    <tr>\n","      <th>553</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>572</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>574</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>591</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>593</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>610</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>612</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>731</th>\n","      <td>Land Rover Discovery Sport TD4 HSE 7S</td>\n","      <td>4000000</td>\n","    </tr>\n","    <tr>\n","      <th>898</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>900</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>917</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>919</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>963</th>\n","      <td>Audi A5 Sportback</td>\n","      <td>4700000</td>\n","    </tr>\n","    <tr>\n","      <th>968</th>\n","      <td>BMW 7 Series Signature 730Ld</td>\n","      <td>4000000</td>\n","    </tr>\n","    <tr>\n","      <th>988</th>\n","      <td>Land Rover Discovery S 2.0 SD4</td>\n","      <td>4000000</td>\n","    </tr>\n","    <tr>\n","      <th>1021</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>1023</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>1026</th>\n","      <td>BMW 3 Series GT Luxury Line</td>\n","      <td>3050000</td>\n","    </tr>\n","    <tr>\n","      <th>1065</th>\n","      <td>Audi A4 30 TFSI Technology</td>\n","      <td>3100000</td>\n","    </tr>\n","    <tr>\n","      <th>1088</th>\n","      <td>Land Rover Discovery Sport SD4 HSE Luxury</td>\n","      <td>3500000</td>\n","    </tr>\n","    <tr>\n","      <th>1290</th>\n","      <td>Toyota Fortuner 2.8 2WD AT BSIV</td>\n","      <td>3200000</td>\n","    </tr>\n","    <tr>\n","      <th>1479</th>\n","      <td>Audi A4 35 TDI Premium Plus</td>\n","      <td>3256000</td>\n","    </tr>\n","    <tr>\n","      <th>1705</th>\n","      <td>Audi Q5 2.0 TDI</td>\n","      <td>3500000</td>\n","    </tr>\n","    <tr>\n","      <th>1834</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>1836</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>2178</th>\n","      <td>Mercedes-Benz GL-Class 350 CDI Blue Efficiency</td>\n","      <td>4400000</td>\n","    </tr>\n","    <tr>\n","      <th>2237</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>2239</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>2256</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>2258</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>2295</th>\n","      <td>Audi Q5 3.0 TDI Quattro Technology</td>\n","      <td>3899000</td>\n","    </tr>\n","    <tr>\n","      <th>2323</th>\n","      <td>Audi A4 30 TFSI Technology</td>\n","      <td>3100000</td>\n","    </tr>\n","    <tr>\n","      <th>2503</th>\n","      <td>Ford Endeavour 3.2 Titanium AT 4X4</td>\n","      <td>3200000</td>\n","    </tr>\n","    <tr>\n","      <th>2580</th>\n","      <td>Mercedes-Benz E-Class Exclusive E 200 BSIV</td>\n","      <td>4500000</td>\n","    </tr>\n","    <tr>\n","      <th>2737</th>\n","      <td>Mercedes-Benz C-Class Progressive C 220d</td>\n","      <td>3800000</td>\n","    </tr>\n","    <tr>\n","      <th>2739</th>\n","      <td>BMW X5 xDrive 30d xLine</td>\n","      <td>4950000</td>\n","    </tr>\n","    <tr>\n","      <th>3453</th>\n","      <td>BMW 5 Series 520d Luxury Line</td>\n","      <td>4800000</td>\n","    </tr>\n","    <tr>\n","      <th>3863</th>\n","      <td>Toyota Fortuner 2.8 4WD AT BSIV</td>\n","      <td>3100000</td>\n","    </tr>\n","    <tr>\n","      <th>3872</th>\n","      <td>Audi RS7 2015-2019 Sportback Performance</td>\n","      <td>8900000</td>\n","    </tr>\n","    <tr>\n","      <th>3873</th>\n","      <td>Audi Q5 3.0 TDI Quattro Technology</td>\n","      <td>3200000</td>\n","    </tr>\n","    <tr>\n","      <th>3875</th>\n","      <td>Land Rover Range Rover 4.4 Diesel LWB Vogue SE</td>\n","      <td>4200000</td>\n","    </tr>\n","    <tr>\n","      <th>3883</th>\n","      <td>BMW 5 Series 520d Luxury Line</td>\n","      <td>4800000</td>\n","    </tr>\n","    <tr>\n","      <th>3969</th>\n","      <td>Mercedes-Benz GLS 2016-2020 350d 4MATIC</td>\n","      <td>5500000</td>\n","    </tr>\n","    <tr>\n","      <th>4047</th>\n","      <td>Volvo XC 90 D5 Inscription BSIV</td>\n","      <td>4500000</td>\n","    </tr>\n","    <tr>\n","      <th>4304</th>\n","      <td>Audi Q5 3.0 TDI Quattro Technology</td>\n","      <td>3899000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df39c25e-f3f3-4c02-9579-afc88b1d84a7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-df39c25e-f3f3-4c02-9579-afc88b1d84a7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-df39c25e-f3f3-4c02-9579-afc88b1d84a7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6c15b039-9ebe-4055-8ea5-4b4880e19baa\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c15b039-9ebe-4055-8ea5-4b4880e19baa')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6c15b039-9ebe-4055-8ea5-4b4880e19baa button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[df[\\\"selling_price\\\"]>3000000][[\\\"name\\\",\\\"selling_price\\\"]]\",\n  \"rows\": 49,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"Audi Q5 3.0 TDI Quattro Technology\",\n          \"BMW 3 Series GT Luxury Line\",\n          \"Mercedes-Benz S-Class S 350d Connoisseurs Edition\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1100069,\n        \"min\": 3050000,\n        \"max\": 8900000,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          8150000,\n          4500000,\n          4000000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["#13.What is the average km driven grouped by tramsmission?\n","df.groupby([\"transmission\"])[\"km_driven\"].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"TAU4kz0KaYjo","executionInfo":{"status":"ok","timestamp":1752571977174,"user_tz":-330,"elapsed":75,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"9ac44798-a397-48b5-97eb-d8140c3f2400"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["transmission\n","Automatic    49688.803571\n","Manual       68118.162898\n","Name: km_driven, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>km_driven</th>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Automatic</th>\n","      <td>49688.803571</td>\n","    </tr>\n","    <tr>\n","      <th>Manual</th>\n","      <td>68118.162898</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#14.Count how many car models use petrol?\n","df.groupby([\"name\"])[\"fuel\"].count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"Za7qjPXNbhvH","executionInfo":{"status":"ok","timestamp":1752572109440,"user_tz":-330,"elapsed":124,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"aa164c23-f026-4cd0-e4f3-e92df54cefda"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name\n","Ambassador CLASSIC 1500 DSL AC          2\n","Ambassador Classic 2000 Dsz             1\n","Ambassador Grand 1800 ISZ MPFI PW CL    1\n","Audi A4 1.8 TFSI                        1\n","Audi A4 2.0 TDI                         1\n","                                       ..\n","Volkswagen Vento Petrol Highline AT     2\n","Volvo V40 D3 R Design                   1\n","Volvo XC 90 D5 Inscription BSIV         1\n","Volvo XC60 D3 Kinetic                   1\n","Volvo XC60 D5 Inscription               1\n","Name: fuel, Length: 1491, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fuel</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Ambassador CLASSIC 1500 DSL AC</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Ambassador Classic 2000 Dsz</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Ambassador Grand 1800 ISZ MPFI PW CL</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Audi A4 1.8 TFSI</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Audi A4 2.0 TDI</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Volkswagen Vento Petrol Highline AT</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Volvo V40 D3 R Design</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Volvo XC 90 D5 Inscription BSIV</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Volvo XC60 D3 Kinetic</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Volvo XC60 D5 Inscription</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1491 rows Ã— 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["#15.What is the average selling price per year?\n","df.groupby([\"year\"])[\"selling_price\"].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":962},"id":"na8i5HOHcB5g","executionInfo":{"status":"ok","timestamp":1752572348120,"user_tz":-330,"elapsed":96,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"06754788-4e30-4ba7-9cf3-908423752e52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["year\n","1992    5.000000e+04\n","1995    9.500000e+04\n","1996    2.250000e+05\n","1997    9.300000e+04\n","1998    2.140000e+05\n","1999    7.350000e+04\n","2000    8.150000e+04\n","2001    1.176499e+05\n","2002    9.071429e+04\n","2003    8.656522e+04\n","2004    1.217500e+05\n","2005    1.090130e+05\n","2006    1.577999e+05\n","2007    1.628284e+05\n","2008    1.742013e+05\n","2009    2.295647e+05\n","2010    2.696781e+05\n","2011    2.936383e+05\n","2012    3.716289e+05\n","2013    4.848010e+05\n","2014    5.232316e+05\n","2015    5.289430e+05\n","2016    6.083641e+05\n","2017    7.689098e+05\n","2018    9.107705e+05\n","2019    1.059020e+06\n","2020    8.184791e+05\n","Name: selling_price, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>selling_price</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1992</th>\n","      <td>5.000000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>9.500000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>2.250000e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>9.300000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>2.140000e+05</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>7.350000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>8.150000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>2001</th>\n","      <td>1.176499e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2002</th>\n","      <td>9.071429e+04</td>\n","    </tr>\n","    <tr>\n","      <th>2003</th>\n","      <td>8.656522e+04</td>\n","    </tr>\n","    <tr>\n","      <th>2004</th>\n","      <td>1.217500e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2005</th>\n","      <td>1.090130e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2006</th>\n","      <td>1.577999e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2007</th>\n","      <td>1.628284e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2008</th>\n","      <td>1.742013e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2009</th>\n","      <td>2.295647e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2010</th>\n","      <td>2.696781e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2011</th>\n","      <td>2.936383e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2012</th>\n","      <td>3.716289e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2013</th>\n","      <td>4.848010e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2014</th>\n","      <td>5.232316e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2015</th>\n","      <td>5.289430e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2016</th>\n","      <td>6.083641e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2017</th>\n","      <td>7.689098e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2018</th>\n","      <td>9.107705e+05</td>\n","    </tr>\n","    <tr>\n","      <th>2019</th>\n","      <td>1.059020e+06</td>\n","    </tr>\n","    <tr>\n","      <th>2020</th>\n","      <td>8.184791e+05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["#16.List the top 5 car models with highest km driven.\n","df.sort_values(by=\"km_driven\",ascending=False).head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"pHXIctzrc8S6","executionInfo":{"status":"ok","timestamp":1752572463281,"user_tz":-330,"elapsed":454,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"5eed7a7b-e613-474e-fb35-b30c693c7f96"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             name  year  selling_price  \\\n","1243                       Maruti Swift VXI BSIII  2009         250000   \n","4184            Maruti SX4 S Cross DDiS 320 Delta  2016         665000   \n","525             Maruti SX4 S Cross DDiS 320 Delta  2016         665000   \n","3679  Toyota Innova 2.5 G (Diesel) 7 Seater BS IV  2006         400000   \n","2394          Toyota Innova 2.5 V Diesel 8-seater  2009         350000   \n","\n","      km_driven    fuel seller_type transmission        owner  \n","1243     806599  Petrol      Dealer       Manual  First Owner  \n","4184     560000  Diesel      Dealer       Manual  First Owner  \n","525      560000  Diesel      Dealer       Manual  First Owner  \n","3679     400000  Diesel  Individual       Manual  Third Owner  \n","2394     350000  Diesel  Individual       Manual  First Owner  "],"text/html":["\n","  <div id=\"df-b7282441-ddff-41a7-b1b3-8c58ee7c5002\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>year</th>\n","      <th>selling_price</th>\n","      <th>km_driven</th>\n","      <th>fuel</th>\n","      <th>seller_type</th>\n","      <th>transmission</th>\n","      <th>owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1243</th>\n","      <td>Maruti Swift VXI BSIII</td>\n","      <td>2009</td>\n","      <td>250000</td>\n","      <td>806599</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>4184</th>\n","      <td>Maruti SX4 S Cross DDiS 320 Delta</td>\n","      <td>2016</td>\n","      <td>665000</td>\n","      <td>560000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>525</th>\n","      <td>Maruti SX4 S Cross DDiS 320 Delta</td>\n","      <td>2016</td>\n","      <td>665000</td>\n","      <td>560000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","    <tr>\n","      <th>3679</th>\n","      <td>Toyota Innova 2.5 G (Diesel) 7 Seater BS IV</td>\n","      <td>2006</td>\n","      <td>400000</td>\n","      <td>400000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>Third Owner</td>\n","    </tr>\n","    <tr>\n","      <th>2394</th>\n","      <td>Toyota Innova 2.5 V Diesel 8-seater</td>\n","      <td>2009</td>\n","      <td>350000</td>\n","      <td>350000</td>\n","      <td>Diesel</td>\n","      <td>Individual</td>\n","      <td>Manual</td>\n","      <td>First Owner</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7282441-ddff-41a7-b1b3-8c58ee7c5002')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b7282441-ddff-41a7-b1b3-8c58ee7c5002 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b7282441-ddff-41a7-b1b3-8c58ee7c5002');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1ef96618-b3dc-4f17-a62d-f46e6236bd56\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ef96618-b3dc-4f17-a62d-f46e6236bd56')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1ef96618-b3dc-4f17-a62d-f46e6236bd56 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Maruti SX4 S Cross DDiS 320 Delta\",\n          \"Toyota Innova 2.5 V Diesel 8-seater\",\n          \"Maruti Swift VXI BSIII\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 2006,\n        \"max\": 2016,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2009,\n          2016,\n          2006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 189519,\n        \"min\": 250000,\n        \"max\": 665000,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          665000,\n          350000,\n          250000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"km_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 178511,\n        \"min\": 350000,\n        \"max\": 806599,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          560000,\n          350000,\n          806599\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fuel\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Diesel\",\n          \"Petrol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"seller_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Individual\",\n          \"Dealer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Third Owner\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["#17.Create a pivot table showing selling price by year and fuel.\n","df.pivot_table(values=\"selling_price\",index=\"year\",columns=\"fuel\",aggfunc=\"mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"id":"dL4AJUMTfF6L","executionInfo":{"status":"ok","timestamp":1752573099052,"user_tz":-330,"elapsed":496,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"412c43ed-9d59-45c8-cb26-5144a12b5b00"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["fuel        CNG        Diesel  Electric       LPG         Petrol\n","year                                                            \n","1992        NaN           NaN       NaN       NaN   50000.000000\n","1995        NaN           NaN       NaN       NaN   95000.000000\n","1996        NaN  2.250000e+05       NaN       NaN            NaN\n","1997        NaN  1.500000e+05       NaN       NaN   64500.000000\n","1998        NaN           NaN       NaN   50000.0  228909.090909\n","1999        NaN  1.700000e+05       NaN       NaN   62777.777778\n","2000        NaN  1.550000e+05       NaN       NaN   74818.181818\n","2001        NaN  1.933333e+05       NaN       NaN  104294.000000\n","2002        NaN  9.500000e+04       NaN       NaN   89375.000000\n","2003        NaN  7.300000e+04       NaN       NaN   90333.333333\n","2004        NaN  2.159999e+05       NaN       NaN   92296.875000\n","2005  130000.00  1.583332e+05       NaN       NaN   95244.075758\n","2006        NaN  2.532256e+05  310000.0   60000.0  118675.324675\n","2007   67500.00  2.607812e+05       NaN   85000.0  134377.540816\n","2008        NaN  2.361249e+05       NaN  125000.0  150857.663462\n","2009  160000.00  3.021481e+05       NaN  100000.0  180112.121495\n","2010  140375.00  3.345050e+05       NaN  180000.0  228045.480000\n","2011  194999.50  3.423789e+05       NaN  214999.5  222952.773585\n","2012  186249.75  4.277003e+05       NaN  200000.0  275431.532374\n","2013  316000.00  5.660446e+05       NaN  262500.0  297838.154545\n","2014  390000.00  6.446562e+05       NaN  250000.0  333402.820144\n","2015        NaN  6.263991e+05       NaN  240000.0  414718.703125\n","2016  325000.00  7.416298e+05       NaN       NaN  473849.670520\n","2017  383750.00  1.039424e+06       NaN       NaN  509652.321888\n","2018  498499.50  1.243419e+06       NaN       NaN  632964.426396\n","2019  440000.00  1.720470e+06       NaN       NaN  573611.074074\n","2020  388500.00  1.230333e+06       NaN       NaN  646935.419355"],"text/html":["\n","  <div id=\"df-1c84bbac-caa0-4bbf-8cdd-a50ff445fe2f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>fuel</th>\n","      <th>CNG</th>\n","      <th>Diesel</th>\n","      <th>Electric</th>\n","      <th>LPG</th>\n","      <th>Petrol</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1992</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>50000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>95000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>NaN</td>\n","      <td>2.250000e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>NaN</td>\n","      <td>1.500000e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>64500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>50000.0</td>\n","      <td>228909.090909</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>NaN</td>\n","      <td>1.700000e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>62777.777778</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>NaN</td>\n","      <td>1.550000e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>74818.181818</td>\n","    </tr>\n","    <tr>\n","      <th>2001</th>\n","      <td>NaN</td>\n","      <td>1.933333e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>104294.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2002</th>\n","      <td>NaN</td>\n","      <td>9.500000e+04</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>89375.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2003</th>\n","      <td>NaN</td>\n","      <td>7.300000e+04</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>90333.333333</td>\n","    </tr>\n","    <tr>\n","      <th>2004</th>\n","      <td>NaN</td>\n","      <td>2.159999e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>92296.875000</td>\n","    </tr>\n","    <tr>\n","      <th>2005</th>\n","      <td>130000.00</td>\n","      <td>1.583332e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>95244.075758</td>\n","    </tr>\n","    <tr>\n","      <th>2006</th>\n","      <td>NaN</td>\n","      <td>2.532256e+05</td>\n","      <td>310000.0</td>\n","      <td>60000.0</td>\n","      <td>118675.324675</td>\n","    </tr>\n","    <tr>\n","      <th>2007</th>\n","      <td>67500.00</td>\n","      <td>2.607812e+05</td>\n","      <td>NaN</td>\n","      <td>85000.0</td>\n","      <td>134377.540816</td>\n","    </tr>\n","    <tr>\n","      <th>2008</th>\n","      <td>NaN</td>\n","      <td>2.361249e+05</td>\n","      <td>NaN</td>\n","      <td>125000.0</td>\n","      <td>150857.663462</td>\n","    </tr>\n","    <tr>\n","      <th>2009</th>\n","      <td>160000.00</td>\n","      <td>3.021481e+05</td>\n","      <td>NaN</td>\n","      <td>100000.0</td>\n","      <td>180112.121495</td>\n","    </tr>\n","    <tr>\n","      <th>2010</th>\n","      <td>140375.00</td>\n","      <td>3.345050e+05</td>\n","      <td>NaN</td>\n","      <td>180000.0</td>\n","      <td>228045.480000</td>\n","    </tr>\n","    <tr>\n","      <th>2011</th>\n","      <td>194999.50</td>\n","      <td>3.423789e+05</td>\n","      <td>NaN</td>\n","      <td>214999.5</td>\n","      <td>222952.773585</td>\n","    </tr>\n","    <tr>\n","      <th>2012</th>\n","      <td>186249.75</td>\n","      <td>4.277003e+05</td>\n","      <td>NaN</td>\n","      <td>200000.0</td>\n","      <td>275431.532374</td>\n","    </tr>\n","    <tr>\n","      <th>2013</th>\n","      <td>316000.00</td>\n","      <td>5.660446e+05</td>\n","      <td>NaN</td>\n","      <td>262500.0</td>\n","      <td>297838.154545</td>\n","    </tr>\n","    <tr>\n","      <th>2014</th>\n","      <td>390000.00</td>\n","      <td>6.446562e+05</td>\n","      <td>NaN</td>\n","      <td>250000.0</td>\n","      <td>333402.820144</td>\n","    </tr>\n","    <tr>\n","      <th>2015</th>\n","      <td>NaN</td>\n","      <td>6.263991e+05</td>\n","      <td>NaN</td>\n","      <td>240000.0</td>\n","      <td>414718.703125</td>\n","    </tr>\n","    <tr>\n","      <th>2016</th>\n","      <td>325000.00</td>\n","      <td>7.416298e+05</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>473849.670520</td>\n","    </tr>\n","    <tr>\n","      <th>2017</th>\n","      <td>383750.00</td>\n","      <td>1.039424e+06</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>509652.321888</td>\n","    </tr>\n","    <tr>\n","      <th>2018</th>\n","      <td>498499.50</td>\n","      <td>1.243419e+06</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>632964.426396</td>\n","    </tr>\n","    <tr>\n","      <th>2019</th>\n","      <td>440000.00</td>\n","      <td>1.720470e+06</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>573611.074074</td>\n","    </tr>\n","    <tr>\n","      <th>2020</th>\n","      <td>388500.00</td>\n","      <td>1.230333e+06</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>646935.419355</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c84bbac-caa0-4bbf-8cdd-a50ff445fe2f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1c84bbac-caa0-4bbf-8cdd-a50ff445fe2f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1c84bbac-caa0-4bbf-8cdd-a50ff445fe2f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-99f21fd1-0627-48ad-8429-6e25f8f67c5e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-99f21fd1-0627-48ad-8429-6e25f8f67c5e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-99f21fd1-0627-48ad-8429-6e25f8f67c5e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1992,\n        \"max\": 2020,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2002,\n          2007,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CNG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138093.20207298704,\n        \"min\": 67500.0,\n        \"max\": 498499.5,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          440000.0,\n          383750.0,\n          130000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diesel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 432368.4074117256,\n        \"min\": 73000.0,\n        \"max\": 1720469.8554216868,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          158333.22222222222,\n          566044.5873605948,\n          225000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Electric\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 310000.0,\n        \"max\": 310000.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          310000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LPG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 79105.04537997676,\n        \"min\": 50000.0,\n        \"max\": 262500.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          180000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Petrol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 189041.902299613,\n        \"min\": 50000.0,\n        \"max\": 646935.4193548387,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          90333.33333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["#18.Find the number of car models per year and seller type.\n","df.pivot_table(values=\"name\",index=\"year\",columns=\"seller_type\",aggfunc=\"count\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"id":"pqprrbpIfzWq","executionInfo":{"status":"ok","timestamp":1752573499397,"user_tz":-330,"elapsed":291,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"e2bb33c6-9d66-4038-8b62-c55314be5fbe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["seller_type  Dealer  Individual  Trustmark Dealer\n","year                                             \n","1992            NaN         1.0               NaN\n","1995            NaN         1.0               NaN\n","1996            NaN         2.0               NaN\n","1997            NaN         3.0               NaN\n","1998            1.0        11.0               NaN\n","1999            NaN        10.0               NaN\n","2000            1.0        11.0               NaN\n","2001            1.0        19.0               NaN\n","2002            NaN        21.0               NaN\n","2003            NaN        23.0               NaN\n","2004            3.0        39.0               NaN\n","2005           19.0        66.0               NaN\n","2006            8.0       102.0               NaN\n","2007           20.0       114.0               NaN\n","2008           10.0       135.0               NaN\n","2009           24.0       169.0               NaN\n","2010           27.0       207.0               NaN\n","2011           45.0       226.0               NaN\n","2012           98.0       317.0               NaN\n","2013          132.0       253.0               1.0\n","2014          106.0       259.0               2.0\n","2015          108.0       266.0              47.0\n","2016           93.0       244.0              20.0\n","2017          152.0       285.0              29.0\n","2018           98.0       265.0               3.0\n","2019           32.0       163.0               NaN\n","2020           16.0        32.0               NaN"],"text/html":["\n","  <div id=\"df-5fbfbaa6-5d34-46e5-958d-a605379ebecc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>seller_type</th>\n","      <th>Dealer</th>\n","      <th>Individual</th>\n","      <th>Trustmark Dealer</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1992</th>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>NaN</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>NaN</td>\n","      <td>3.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>1.0</td>\n","      <td>11.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>NaN</td>\n","      <td>10.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>1.0</td>\n","      <td>11.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2001</th>\n","      <td>1.0</td>\n","      <td>19.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2002</th>\n","      <td>NaN</td>\n","      <td>21.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2003</th>\n","      <td>NaN</td>\n","      <td>23.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2004</th>\n","      <td>3.0</td>\n","      <td>39.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2005</th>\n","      <td>19.0</td>\n","      <td>66.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2006</th>\n","      <td>8.0</td>\n","      <td>102.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2007</th>\n","      <td>20.0</td>\n","      <td>114.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2008</th>\n","      <td>10.0</td>\n","      <td>135.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009</th>\n","      <td>24.0</td>\n","      <td>169.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2010</th>\n","      <td>27.0</td>\n","      <td>207.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2011</th>\n","      <td>45.0</td>\n","      <td>226.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2012</th>\n","      <td>98.0</td>\n","      <td>317.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2013</th>\n","      <td>132.0</td>\n","      <td>253.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2014</th>\n","      <td>106.0</td>\n","      <td>259.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2015</th>\n","      <td>108.0</td>\n","      <td>266.0</td>\n","      <td>47.0</td>\n","    </tr>\n","    <tr>\n","      <th>2016</th>\n","      <td>93.0</td>\n","      <td>244.0</td>\n","      <td>20.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017</th>\n","      <td>152.0</td>\n","      <td>285.0</td>\n","      <td>29.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018</th>\n","      <td>98.0</td>\n","      <td>265.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019</th>\n","      <td>32.0</td>\n","      <td>163.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2020</th>\n","      <td>16.0</td>\n","      <td>32.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fbfbaa6-5d34-46e5-958d-a605379ebecc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5fbfbaa6-5d34-46e5-958d-a605379ebecc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5fbfbaa6-5d34-46e5-958d-a605379ebecc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-dc4c67c4-a146-4be9-be36-3b13efb55248\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc4c67c4-a146-4be9-be36-3b13efb55248')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-dc4c67c4-a146-4be9-be36-3b13efb55248 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1992,\n        \"max\": 2020,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2002,\n          2007,\n          2003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dealer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.96324965201397,\n        \"min\": 1.0,\n        \"max\": 152.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          1.0,\n          3.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Individual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.42942012554707,\n        \"min\": 1.0,\n        \"max\": 317.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          39.0,\n          317.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trustmark Dealer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.601075237738275,\n        \"min\": 1.0,\n        \"max\": 47.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["#19.What is the correlation between km driven and selling price?\n","df[[\"km_driven\",\"selling_price\"]].corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"kRWiUQCWgkSV","executionInfo":{"status":"ok","timestamp":1752573604768,"user_tz":-330,"elapsed":272,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"de25b489-5e71-42a6-c688-b9d33da9d21c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               km_driven  selling_price\n","km_driven       1.000000      -0.192289\n","selling_price  -0.192289       1.000000"],"text/html":["\n","  <div id=\"df-8904eb53-d8b4-48ef-bf19-f8697d57deb3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>km_driven</th>\n","      <th>selling_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>km_driven</th>\n","      <td>1.000000</td>\n","      <td>-0.192289</td>\n","    </tr>\n","    <tr>\n","      <th>selling_price</th>\n","      <td>-0.192289</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8904eb53-d8b4-48ef-bf19-f8697d57deb3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8904eb53-d8b4-48ef-bf19-f8697d57deb3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8904eb53-d8b4-48ef-bf19-f8697d57deb3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-397a260a-1482-4aaa-b196-bac68d909d3a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-397a260a-1482-4aaa-b196-bac68d909d3a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-397a260a-1482-4aaa-b196-bac68d909d3a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"km_driven\\\",\\\"selling_price\\\"]]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"km_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8430753757900729,\n        \"min\": -0.19228863054511483,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.19228863054511483,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"selling_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8430753757900729,\n        \"min\": -0.19228863054511483,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          -0.19228863054511483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["#20. Show a pie chart of seller type distribution.\n","df['seller_type'].value_counts().plot(kind='pie', autopct='%1.1f%%',title='Seller Type')"],"metadata":{"id":"m-Lsb2D4hvAY","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1752675213948,"user_tz":-330,"elapsed":389,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"a1ce3b22-1830-4b51-8004-ccc8513e1cbf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Seller Type'}, ylabel='count'>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#21.Create a histogram of fuel used.\n","plt.hist(df['fuel'])\n","\n","plt.xlabel(\"fuel\")\n","plt.ylabel(\"Cars\")\n","\n","plt.show()"],"metadata":{"id":"AK-OMbC8k_an","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1752724683618,"user_tz":-330,"elapsed":193,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"7042bbca-0d0b-4831-ba40-93b663b4ec5d"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#22.Plot a scatter plot of selling price vs km driven\n","plt.scatter(df['km_driven'],df['selling_price'])\n","plt.title('Selling Price vs Km Driven')\n","plt.xlabel('Km Driven')\n","plt.ylabel('Selling Price')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"mqW3bBHpgMCs","executionInfo":{"status":"ok","timestamp":1752727165520,"user_tz":-330,"elapsed":255,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"22790971-7a7c-411c-bd80-a7bd864211e4"},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#23.Make barchart of average selling price per fuel type.\n","df.groupby('fuel')['selling_price'].mean().plot(kind='bar', color='orange')\n","plt.title('Avg Selling Price by Fuel Type')\n","plt.ylabel('Avg Price')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":509},"id":"VRyaBcr1jqiq","executionInfo":{"status":"ok","timestamp":1752727287776,"user_tz":-330,"elapsed":271,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"27eb4cd7-b407-4e66-b070-fde8a8c1656c"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#24.Make bar chart of counts of cars per year.\n","df['year'].value_counts().sort_index().plot(kind='bar', color='teal')\n","plt.title('Number of Cars by Year')\n","plt.xlabel('Year')\n","plt.ylabel('Number of Cars')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":493},"id":"mqiXNqMUkBDh","executionInfo":{"status":"ok","timestamp":1752727369240,"user_tz":-330,"elapsed":375,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"24ab56f9-73b4-40b9-94cb-2b0cf6d11c25"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#25.Make boxplot of selling price by transmission.\n","sns.barplot(data=df, x='transmission', y='selling_price')\n","plt.title(\"Average Selling Price by Transmission\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"_vv6il7zsMMW","executionInfo":{"status":"ok","timestamp":1752727439780,"user_tz":-330,"elapsed":291,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"0e43c09d-0fb1-4c06-c239-4f1eb991d1d2"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#26.how many cars are sold per year?\n","df['year'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":962},"id":"nrB2Lyhuskbw","executionInfo":{"status":"ok","timestamp":1752727563254,"user_tz":-330,"elapsed":71,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"f9c76188-2711-4cfc-f8fe-71051c151b64"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["year\n","2017    466\n","2015    421\n","2012    415\n","2013    386\n","2014    367\n","2018    366\n","2016    357\n","2011    271\n","2010    234\n","2019    195\n","2009    193\n","2008    145\n","2007    134\n","2006    110\n","2005     85\n","2020     48\n","2004     42\n","2003     23\n","2002     21\n","2001     20\n","1998     12\n","2000     12\n","1999     10\n","1997      3\n","1996      2\n","1995      1\n","1992      1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017</th>\n","      <td>466</td>\n","    </tr>\n","    <tr>\n","      <th>2015</th>\n","      <td>421</td>\n","    </tr>\n","    <tr>\n","      <th>2012</th>\n","      <td>415</td>\n","    </tr>\n","    <tr>\n","      <th>2013</th>\n","      <td>386</td>\n","    </tr>\n","    <tr>\n","      <th>2014</th>\n","      <td>367</td>\n","    </tr>\n","    <tr>\n","      <th>2018</th>\n","      <td>366</td>\n","    </tr>\n","    <tr>\n","      <th>2016</th>\n","      <td>357</td>\n","    </tr>\n","    <tr>\n","      <th>2011</th>\n","      <td>271</td>\n","    </tr>\n","    <tr>\n","      <th>2010</th>\n","      <td>234</td>\n","    </tr>\n","    <tr>\n","      <th>2019</th>\n","      <td>195</td>\n","    </tr>\n","    <tr>\n","      <th>2009</th>\n","      <td>193</td>\n","    </tr>\n","    <tr>\n","      <th>2008</th>\n","      <td>145</td>\n","    </tr>\n","    <tr>\n","      <th>2007</th>\n","      <td>134</td>\n","    </tr>\n","    <tr>\n","      <th>2006</th>\n","      <td>110</td>\n","    </tr>\n","    <tr>\n","      <th>2005</th>\n","      <td>85</td>\n","    </tr>\n","    <tr>\n","      <th>2020</th>\n","      <td>48</td>\n","    </tr>\n","    <tr>\n","      <th>2004</th>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>2003</th>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>2002</th>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>2001</th>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1992</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["#27.Make a pie chart which shows cars by transmission type.\n","df['transmission'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90)\n","plt.title('Transmission Type Share')\n","plt.ylabel('')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"SkuzOuj7tCoH","executionInfo":{"status":"ok","timestamp":1752727995609,"user_tz":-330,"elapsed":123,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"956ddffd-ba80-459b-d85f-4da37836dd98"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#28.Check how many cars were made in 2015 or later.\n","np.sum(df['year'] >= 2015)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qVGl7sF3usK4","executionInfo":{"status":"ok","timestamp":1752729853136,"user_tz":-330,"elapsed":69,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"5c186aa1-cba6-452c-988b-46573303bada"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(1853)"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["#29.How many cars are older than 15 years?\n","np.sum(df['year']>15)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rhDSoRDZxegW","executionInfo":{"status":"ok","timestamp":1752734105601,"user_tz":-330,"elapsed":30,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"7dd59578-10b4-4d32-ad4d-057759952013"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(4340)"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["#30.What is average manufacturing year?\n","np.mean(df['year'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vKcNEimtFyBU","executionInfo":{"status":"ok","timestamp":1752734191042,"user_tz":-330,"elapsed":30,"user":{"displayName":"Monika","userId":"06736732378684357376"}},"outputId":"43338e9b-5459-4803-c25d-421735b074f1"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(2013.0907834101383)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["#  ------------------  KEY FINDINGS FROM THE BANKING DATASET    --------------------------    #"],"metadata":{"id":"ukzeyQbuGN2U","executionInfo":{"status":"ok","timestamp":1752734451374,"user_tz":-330,"elapsed":27,"user":{"displayName":"Monika","userId":"06736732378684357376"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"j6RsFp73HUT7"},"execution_count":null,"outputs":[]}]}